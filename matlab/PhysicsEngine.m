function [roll_alpha,pitch_alpha,yaw_alpha,M_roll_f1,M_roll_f2,M_roll_f3,M_roll_f4,M_pitch_f1,M_pitch_f2,M_pitch_f3,M_pitch_f4,drag_f1,drag_f2,drag_f3,drag_f4,f1_eff_area,f2_eff_area,f3_eff_area,f4_eff_area]=PhysicsEngine(f1,f2,f3,f4,theta_roll,theta_pitch,theta_yaw,t)
    %Physical Parameters
    A= 0.087;
    f1_area= 0.0026;
    f2_area= 0.0026;
    f3_area= 0.0039;
    f4_area= 0.0039;
    roll_moment_arm_canards= 0.114; %Coordinates measure from COM
    roll_moment_arm_fins= 0.126; %Coordinates measure from COM
    pitch_moment_arm_canards= 0.2; %Arranged such that CP is ahead of CG (landing position) 
    pitch_moment_arm_fins= 0.1; %Arranged such that CP is ahead of CG (landing position) 
    I_roll= 0.0016129;
    I_pitch= 0.003484;
    I_yaw= 0.003484;
    m= 0.5;
    rho= 1.225;
    Cd= 0.3;
    g=9.8;
   
    v=sqrt((2*m*g)/(rho*A*Cd))*tanh(sqrt((g*rho*Cd*A)/(2*m))*t); %Calculates Velocity
    drag_density=(0.5)*rho*v^2*Cd; %Calculates drag per unit area
    
    %Calculates projected fin areas (effective fin area exposed to airflow)
    f1_eff_area=f1_area*cosd(-theta_roll+f1)*cosd(theta_pitch);
    f2_eff_area=f2_area*cosd(theta_roll+f2)*cosd(theta_pitch);
    f3_eff_area=f3_area*cosd(-theta_roll+f3)*cosd(theta_pitch);
    f4_eff_area=f4_area*cosd(theta_roll+f4)*cosd(theta_pitch);
    
    %Calculates drag force generated by each fin
    drag_f1= drag_density*f1_eff_area;
    drag_f2= drag_density*f2_eff_area;
    drag_f3= drag_density*f3_eff_area;
    drag_f4= drag_density*f4_eff_area;
    
    %Calculates the moment due to the drag on each fin
    M_roll_f1= drag_f1*roll_moment_arm_canards*cosd(theta_roll+f1);
    M_roll_f2= -drag_f2*roll_moment_arm_canards*cosd(-theta_roll+f2);
    M_roll_f3= drag_f3*roll_moment_arm_fins*cosd(theta_roll+f3);
    M_roll_f4= -drag_f4*roll_moment_arm_fins*cosd(-theta_roll+f4);
    M_pitch_f1= drag_f1*pitch_moment_arm_canards*cosd(theta_pitch);
    M_pitch_f2= drag_f2*pitch_moment_arm_canards*cosd(theta_pitch);
    M_pitch_f3= -drag_f3*pitch_moment_arm_fins*cosd(theta_pitch);
    M_pitch_f4= -drag_f4*pitch_moment_arm_fins*cosd(theta_pitch);
    M_roll_net= M_roll_f1+M_roll_f2+M_roll_f3+M_roll_f4;
    M_pitch_net= M_pitch_f1+M_pitch_f2+M_pitch_f3+M_pitch_f4;
    
    %Calculates Angular Acceleration
    roll_alpha= M_roll_net/I_roll;
    pitch_alpha= M_pitch_net/I_pitch;
    yaw_alpha=0;
end